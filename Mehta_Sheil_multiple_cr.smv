MODULE car(switch)
VAR
    talk: boolean;
    --status: {tr1, tr2, tr3};
ASSIGN
    --init(talk):= !switch;
    init(talk):=
    case
        switch = TRUE : FALSE;
        switch = FALSE : TRUE;
        --TRUE : TRUE;
    esac;

    next(talk):=
    case
        talk = TRUE & switch = TRUE : FALSE;
        talk = TRUE & switch = FALSE : TRUE;
        talk = FALSE & switch = TRUE : FALSE;
        talk = FALSE & switch = FALSE : TRUE;
        switch = FALSE : TRUE;
    esac;

FAIRNESS running
FAIRNESS switch = TRUE & talk = FALSE
FAIRNESS switch = FALSE & talk = TRUE
--SPEC AG !(switch = TRUE & talk= TRUE)
--SPEC AG !(switch = FALSE & talk= FALSE)
--SPEC AG !(switch = talk)
SPEC AF switch = FALSE
SPEC AF switch = TRUE


MODULE control
VAR
    transmitter: {tr1,tr2, tr3};
    switch: boolean;
ASSIGN
    init(switch):= {TRUE, FALSE};
    init(transmitter):= tr1;
    next(switch):=
    case
        switch = TRUE : FALSE;
        switch = FALSE : TRUE;
    esac;
    next(transmitter):= 
    case
        switch = TRUE & transmitter = tr1 : {tr2,tr3};
        switch = TRUE & transmitter = tr2 : {tr1,tr3};
        switch = TRUE & transmitter = tr3 : {tr1,tr2};
        switch = FALSE & transmitter = tr1 : tr1;
        switch = FALSE & transmitter = tr2 : tr2;
        switch = FALSE & transmitter = tr3 : tr3;
        --TRUE : transmitter;
    esac;
FAIRNESS running
SPEC AG(switch = TRUE & transmitter=tr1) -> AX (transmitter != tr1)
SPEC AG(switch = TRUE & transmitter=tr2) -> AX (transmitter != tr2)
SPEC AG(switch = TRUE & transmitter=tr3) -> AX (transmitter != tr3)
SPEC EF (switch=TRUE)


MODULE transmitter(talk, switch, curr, name)
VAR
    --status: boolean; 
    stat : boolean;
ASSIGN
    --init(stat) := TRUE;
    init(stat):=
    case
        curr = name : TRUE;
        TRUE : FALSE;
    esac;

SPEC AF(curr = name -> AX stat = TRUE)

--MODULE transmitter2


MODULE main
VAR 
    ctrl: process control;
    cr : process car(ctrl.switch);
    --
    trans1 : process transmitter(cr.talk ,ctrl.switch , ctrl.transmitter, tr1);
    trans2 : process transmitter(cr.talk , ctrl.switch, ctrl.transmitter, tr2);
    trans3 : process transmitter(cr.talk , ctrl.switch, ctrl.transmitter, tr3);

FAIRNESS running
FAIRNESS ctrl.switch != cr.talk
FAIRNESS trans1.stat = TRUE & trans2.stat = FALSE & trans3.stat = FALSE
FAIRNESS trans1.stat = FALSE & trans2.stat = TRUE  & trans3.stat = FALSE
FAIRNESS trans1.stat = FALSE & trans2.stat = FALSE & trans3.stat = TRUE